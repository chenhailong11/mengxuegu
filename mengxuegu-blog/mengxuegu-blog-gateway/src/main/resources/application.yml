server:
  port: 6001

spring:
  application:
    name: gateway-server # 应用名
    redis:
      host: had-13 # Redis服务器地址
      port: 6379 # Redis服务器连接端口
      # Redis服务器连接密码（默认为空），注释放到上面来，不然控制台可能会一直打印日志
      password:
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848 # 注册中心地址
    gateway:
      discovery:
        locator:
          enabled:  true
      routes: # List类型
          # id：路由标识，具有唯一性
        - id: blog-article
          # 目标服务地址（uri：地址，请求转发后的地址
          uri: http://localhost:8001
          # 目标服务地址 lb://目标服务名，会自动从注册中心获取此服务的ip和端口转发到 article-server 服务处理
          #uri: lb://article-service
          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
          predicates:
            # 匹配访问路径，格式为 uri/article/**
            - Path=/article/**
          filters:
            #代理转发时去掉路径位数,发送请求 uri/str/article，/str 部分会被下面的过滤器给截取掉
            #- StripPrefix=1
            # 开启限流 RequestRateLimiter
            - name: RequestRateLimiter
              args:
                # 限流过滤器的 Bean 名称
                key-resolver: "#{@uriKeyResolver}"
                # 希望允许用户每秒执行多少个请求。令牌桶填充的速率。
                redis-rate-limiter.replenishRate: 2
                # 允许用户在一秒钟内完成的最大请求数。 这是令牌桶可以容纳的令牌数量，将此值设置为零将阻止所有请求
                redis-rate-limiter.burstCapacity: 4
                #允许突发4个请求，但是在下一秒中，仅2个请求可用


        - id: blog-question
          # 目标服务地址（uri：地址，请求转发后的地址
          uri: http://localhost:8002
          # 目标服务地址 lb://目标服务名，会自动从注册中心获取此服务的ip和端口转发到 article-server 服务处理
          #uri: lb://question-service
          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
          predicates:
            # 匹配访问路径，格式为 uri/article/**
            - Path=/question/**
          filters:
            #代理转发时去掉路径位数,发送请求 uri/str/article，/str 部分会被下面的过滤器给截取掉
            #- StripPrefix=1
            # 开启限流 RequestRateLimiter
            - name: RequestRateLimiter
              args:
                # 限流过滤器的 Bean 名称
                key-resolver: "#{@uriKeyResolver}"
                # 希望允许用户每秒执行多少个请求。令牌桶填充的速率。
                redis-rate-limiter.replenishRate: 2
                # 允许用户在一秒钟内完成的最大请求数。 这是令牌桶可以容纳的令牌数量，将此值设置为零将阻止所有请求
                redis-rate-limiter.burstCapacity: 4
                #允许突发4个请求，但是在下一秒中，仅2个请求可用

        - id: blog-system
          # 目标服务地址（uri：地址，请求转发后的地址
          uri: http://localhost:8003
          # 目标服务地址 lb://目标服务名，会自动从注册中心获取此服务的ip和端口转发到 article-server 服务处理
          #uri: lb://system-service
          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
          predicates:
            # 匹配访问路径，格式为 uri/article/**
            - Path=/system/**
          filters:
            #代理转发时去掉路径位数,发送请求 uri/str/article，/str 部分会被下面的过滤器给截取掉
            #- StripPrefix=1
            # 开启限流 RequestRateLimiter
            - name: RequestRateLimiter
              args:
                # 限流过滤器的 Bean 名称
                key-resolver: "#{@uriKeyResolver}"
                # 希望允许用户每秒执行多少个请求。令牌桶填充的速率。
                redis-rate-limiter.replenishRate: 2
                # 允许用户在一秒钟内完成的最大请求数。 这是令牌桶可以容纳的令牌数量，将此值设置为零将阻止所有请求
                redis-rate-limiter.burstCapacity: 4
                #允许突发4个请求，但是在下一秒中，仅2个请求可用

        - id: blog-auth
          # 目标服务地址（uri：地址，请求转发后的地址
          uri: http://localhost:7001
          # 目标服务地址 lb://目标服务名，会自动从注册中心获取此服务的ip和端口转发到 article-server 服务处理
          #uri: lb://auth-service
          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
          predicates:
            # 匹配访问路径，格式为 uri/article/**
            - Path=/auth/**
          filters:
            #代理转发时去掉路径位数,发送请求 uri/str/article，/str 部分会被下面的过滤器给截取掉
            #- StripPrefix=1
            - name: RequestRateLimiter
              args:
                # 限流过滤器的 Bean 名称
                key-resolver: "#{@uriKeyResolver}"
                # 希望允许用户每秒执行多少个请求。令牌桶填充的速率。
                redis-rate-limiter.replenishRate: 2
                # 允许用户在一秒钟内完成的最大请求数。 这是令牌桶可以容纳的令牌数量，将此值设置为零将阻止所有请求
                redis-rate-limiter.burstCapacity: 4
                #允许突发4个请求，但是在下一秒中，仅2个请求可用
